[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'Shougo/denite.nvim'

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_smart_case=1
  inoremap <expr><TAB> pumvisible() ? "\<C-N>" : "\<TAB>"
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <silent><C-o> :<C-u>NERDTreeToggle<CR>
  let g:NERDTreeShowHidden = 1
'''

[[plugins]] # カラースキーマ
repo = 'jonathanfilip/vim-lucius'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  "  au MyAutoCmd VimEnter * nested colorscheme hybrid
    colorscheme lucius
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''   
  set laststatus=2
  let g:airline_theme = 'deus'
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  let g:airline#extensions#virtualenv#enabled = 1
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
      let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
      let cmd = 'make -f make_cygwin.mak'
      elseif executable('gmake')
      let cmd = 'gmake'
      else
      let cmd = 'make'
      endif
      let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo ="kristijanhusak/defx-git"
# hook_add = '''
# call defx#custom#column('git', 'indicators', {
#   \ 'Modified'  : '✹',
#   \ 'Staged'    : '✚',
#   \ 'Untracked' : '✭',
#   \ 'Renamed'   : '➜',
#   \ 'Unmerged'  : '═',
#   \ 'Ignored'   : '☒',
#   \ 'Deleted'   : '✖',
#   \ 'Unknown'   : '?'
#   \ })
# '''

[[plugins]]
repo ="kristijanhusak/defx-icons"

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-git', 'defx-icons']
# hook_add = '''
# call defx#custom#column('icon', {
#       \ 'directory_icon': '▸',
#       \ 'opened_icon': '▾',
#       \ 'root_icon': ' ',
#       \ })
# 
# call defx#custom#column('filename', {
#       \ 'min_width': 40,
#       \ 'max_width': 40,
#       \ })
# 
# call defx#custom#column('mark', {
#       \ 'readonly_icon': '✗',
#       \ 'selected_icon': '✓',
#       \ })
# 
# call defx#custom#option('_', {
#       \ 'columns': 'indent:git:icons:filename',
#       \ 'show_ignored_files': 1,
#       \ })
# 
# nnoremap <silent>fi :<C-u>Defx -new `expand('%:p:h')` -search=`expand('%:p')`<CR>
# autocmd FileType defx call s:defx_my_settings()
#   function! s:defx_my_settings() abort
#     " Define mappings
#     nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
#     nnoremap <silent><buffer><expr> c defx#do_action('copy')
#     nnoremap <silent><buffer><expr> m defx#do_action('move')
#     nnoremap <silent><buffer><expr> p defx#do_action('paste')
#     nnoremap <silent><buffer><expr> l defx#do_action('open')
#     nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
#     nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
#     nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')
#     nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
#     nnoremap <silent><buffer><expr> N defx#do_action('new_file')
#     nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
#     nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
#     nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
#     nnoremap <silent><buffer><expr> d defx#do_action('remove')
#     nnoremap <silent><buffer><expr> r defx#do_action('rename')
#     nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
#     nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
#     nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
#     nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
#     nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
#     nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
#     nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
#     nnoremap <silent><buffer><expr> q defx#do_action('quit')
#     nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
#     nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
#     nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
#     nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
#     nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
#     nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
#     nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
#   endfunction
# '''

